Useful commands

kubectl help
kubectl help <command-name>

Everything in K8S is represented by a RESTful resource.
Ex., https://your-k8s.com/api/v1/namespaces/default/pods/my-pod/

Extract specific fields from the object (ex. IP from pod):
kubectl get pods my-pod -o jsonpath --template={.status.podIP}

Add new color=red label to POD my-pod. The syntax for annotations is identical.
kubectl label pods my-pod color=red
Remove label:
kubectl label pods my-pod -color

Check logs on pod:
kubectl logs <pod-name>
Execute command in a running container:
kubectl exec -it <pod-name> -- bash
Copy file from container to local machine (and vise versa with reverted syntax).
kubectl cp <pod-name>:/path/to/remote/file /path/to/local/file


Cluster. Components of the cluster

Kubernetes Proxy
Routing network traffic to nodes (to load-balanced services on nodes, particularly) in cluster, proxy must be present on each node in cluster.
DaemonSet - kubernetes API object to server proxy.
Check proxies:
kubectl get daemonSets --namespace=kube-system kube-proxy

DNS
Manages service discovery and naming inside the cluster
DNS runs in k8s as deployment
kubectl get deployments --namespace=kube-system kube-dns
Service that performs load-balancing for the DNS server
kubectl get services --namespace=kube-system kube-dns

GUI
Provides visualisation
kubectl get deployments --namespace=kube-system kubernetes-dashboard
kubectl proxy - runs webUI on 127.0.0.1:8001/ui to describe/manage k8s cluster



Context

Kubectl is the tool used to check/access cluster
Different contexts are used to change default settings:
kubectl config set-context kuard-context --namespace kuard - create new context
kubectl config use-context - use created context
Get status of components (like scheduler, controller manager etc)
kubectl get componentstatuses



Objects

View objects
List running nodes (describe status, roles)
kubectl get nodes
Get detailed info on particular node
kubectl describe <resource-name> <obj-name>

Create/update objects
kubectl apply -f object.xml (object.json)

Delete objects
kubectl delete -f object.xml (object.json)
kubectl delete <resource-name>/<obj-name>



PODs

kubectl run <pod-name> --image=<image-path-name>:<version>
kubectl get pods
kubectl describe <resource(pods, rs etc.)> <object-name>
kubectl logs <pod-name> - logs
kubectl exec -it <pod-name> -- bash - run command on pod
kubectl cp <pod-name>:/path/to/remote /path/to/local - copy pod -> local
kubectl cp /path/to/local  <pod-name>:/path/to/remote - copy local -> pod

access through k-master with secure tunnel forwarding on 8080 port:
kubectl port-forward kuard 8080:8080



Labels

Used to identify, group objects
Also, used in runtime to filter groups of resources (ex. - PODS)
kubectl run <pod-name> --image=<img-name> --labels="ver=1,env=test,app=Tested"
kubectl get deployments --show-labels
kubectl get pods --selector=”ver=1”



ReplicaSet

kubectl apply -f <manifest-file:kuard-rs-pod.yaml>
kubectl describe rs <rs-name:kuard> - rs-name described in manifest kuard-rs-pod.yaml in section metadata.name
Scaling:
Imperatively:
kubectl scale --replicas=4 rs/kuard
Declaratively:
Change replicas=n in pod manifest, then apply via kubectl again
Autoscaling:
The following command would create autoscaler that balancing between 2 and 5 replicas on CPU threshold 80%
kubectl autoscale rs kuard --min=2 --max=5 --cpu-percent=80
To check this horizontal pod autoscaler:
kubectl get hpa
To remove replica with all it’s managed nodes (--cascade=false) will keep nodes:
kubectl delete rs kuard <--cascade=false>
To remove horizontal pod autoscaler also:
kubectl delete hpa kuard




